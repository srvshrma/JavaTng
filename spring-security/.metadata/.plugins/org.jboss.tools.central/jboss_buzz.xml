<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Shenandoah GC in JDK 14, Part 2: Concurrent roots and class unloading</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/i6olHB1kU4g/" /><category term="Java" /><category term="Performance" /><category term="Programming Languages" /><category term="class unloading" /><category term="concurrent" /><category term="JDK 14" /><category term="roots" /><category term="Shenandoah GC" /><author><name>Roman Kennke</name></author><id>https://developers.redhat.com/blog/?p=684837</id><updated>2020-03-09T07:00:53Z</updated><published>2020-03-09T07:00:53Z</published><content type="html">&lt;p&gt;The first part of this miniseries about Shenandoah GC in JDK 14 covered &lt;a href="https://developers.redhat.com/blog/2020/03/04/shenandoah-gc-in-jdk-14-part-1-self-fixing-barriers/" target="_blank" rel="noopener noreferrer"&gt;self-fixing barriers&lt;/a&gt;. This article discusses concurrent roots processing and concurrent class unloading, both of which aim to reduce GC pause time by moving GC work from the pause to a concurrent phase.&lt;/p&gt; &lt;h2&gt;Concurrent roots processing&lt;/h2&gt; &lt;p&gt;Once concurrent marking is done, Shenandoah needs to complete the marking and prepare for evacuation. While these are two logically independent operations, they are performed under a single pause that is confusingly named &amp;#8220;Final Mark.&amp;#8221;&lt;/p&gt; &lt;p&gt;While evacuation itself is concurrent in Shenandoah, there are still a few things that need to be done at pause. These include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Pre-evacuating and updating non-weak roots (for example, thread stacks and strong JNI handles).&lt;/li&gt; &lt;li&gt;Pre-evacuating and cleaning up weak roots (for example, string tables and weak JNI handles).&lt;/li&gt; &lt;li&gt;Unloading classes.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Since this work is done during the pause, it affects pause times. To minimize these pause times, we want to perform most of these tasks concurrently. This approach is particularly important for any GC roots that are unbounded in size.&lt;/p&gt; &lt;p&gt;The reason we need to pre-evacuate and update all GC roots during the pause is to ensure the strong invariant. Any object that is read from or stored to must be in to-space.&lt;/p&gt; &lt;p&gt;Here is the important caveat: Loading the objects out of GC roots does not employ load reference barriers. So, the application has to see the correct copy of the object, and we have to perform the evacs and updates before unblocking from the pause. In this problem statement lies a relatively simple solution: Ensure that loads from relevant GC roots are guarded by a Load Reference Barrier (LRB) that we call &amp;#8220;native LRB,&amp;#8221; and move the actual updating of those roots to the concurrent phase.&lt;/p&gt; &lt;p&gt;The so-called &amp;#8220;weak&amp;#8221; roots are special, though. During marking, we might determine that certain GC roots are no longer reachable. An example of this issue is weak JNI handles. Once the weak JNI handle is declared dead (during final mark), it should not be accidentally resurrectedâ€”for example, by inserting the reference to its presumed-dead object back into the heap.&lt;/p&gt; &lt;p&gt;Therefore, not only do we have to pre-evacuate and update the weak roots that are reachable (like all other roots), we also need to clean up the weak roots that are not reachable so the application cannot possibly touch and resurrect them.&lt;/p&gt; &lt;p&gt;Moving this cleanup to the concurrent phase requires extra work for the native LRB, which checks whether a weak root is reachable (as told by the marking bitmap). If the weak root is not reachable, the native LRB simply returns NULL, thus pretending to the rest of the JVM that the handle is already cleaned. This process ensures that we do not accidentally make an already-unreachable object reachable again.&lt;/p&gt; &lt;p&gt;In pseudocode, the native LRB looks like this:&lt;/p&gt; &lt;pre&gt;T native_LRB(T* addr) { T obj = *addr; // Load from GC root if (is_reachable(obj)) { return LRB(obj); } else { return NULL; } } &lt;/pre&gt; &lt;h2&gt;Concurrent class unloading&lt;/h2&gt; &lt;p&gt;Another large item during the final mark pause used to be &lt;em&gt;class unloading&lt;/em&gt;, which is important for applications that make heavy use of class loaders. This situation is usually the case for application servers and other large-ish applications (e.g., IDEs). However, class unloading is also relevant when using anonymous classes (each of which has its own class loader) and lambdas (similar to anonymous classes).&lt;/p&gt; &lt;p&gt;Class unloading is a complex procedure. It requires the code to determine whether or not classes (or rather, class loaders) are reachable. This check already happens during concurrent marking. When reachability of all objects (including class-loaders) is established, all unreachable class loaders and their classes and auxiliary data structures need to be unlinked and cleaned. Compiled code that belongs to those classes needs to get cleaned.&lt;/p&gt; &lt;p&gt;For the most part, Shenandoah&amp;#8217;s implementation builds on the work done by ZGC developers in JDK 13. This implementation does require the native barriers described above. In addition to that, it also requires so-called &amp;#8220;nmethod entry barriers.&amp;#8221;&lt;/p&gt; &lt;p&gt;Usually, during the pause, we need to pre-evacuate and update all references that are embedded in all compiled methods. Ideally, we would only pre-evacuate/update references in methods that are currently executed (i.e., reachable by frames on the stacks), and handle other methods concurrently. In order for this approach to work, we need to handle the scenario where a thread starts executing a method.&lt;/p&gt; &lt;p&gt;The idea behind nmethod barriers is that they are executed whenever a method is called. Before execution is handed over to the method, the GC barrier is called to do certain things. In Shenandoah, this means to scan the method&amp;#8217;s code for embedded objects (constants) and evacuate-and-update them, in order to ensure the strong invariant above. Live nmethods are armed at the final mark pause and disarmed by either GC threads during a concurrent phase or by Java threads when the nmethods are about to be executed.&lt;/p&gt; &lt;p&gt;The net advantage of concurrent roots processing and concurrent class unloading is that the final mark pause is shorter, and thus global latency is improved, even when the application makes heavy use of class loaders or JNI handles.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F09%2Fshenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%202%3A%20Concurrent%20roots%20and%20class%20unloading" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F09%2Fshenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%202%3A%20Concurrent%20roots%20and%20class%20unloading" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F09%2Fshenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%202%3A%20Concurrent%20roots%20and%20class%20unloading" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F09%2Fshenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%202%3A%20Concurrent%20roots%20and%20class%20unloading" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F09%2Fshenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%202%3A%20Concurrent%20roots%20and%20class%20unloading" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F09%2Fshenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%202%3A%20Concurrent%20roots%20and%20class%20unloading" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F09%2Fshenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%202%3A%20Concurrent%20roots%20and%20class%20unloading" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F09%2Fshenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading%2F&amp;#038;title=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%202%3A%20Concurrent%20roots%20and%20class%20unloading" data-a2a-url="https://developers.redhat.com/blog/2020/03/09/shenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading/" data-a2a-title="Shenandoah GC in JDK 14, Part 2: Concurrent roots and class unloading"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/09/shenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading/"&gt;Shenandoah GC in JDK 14, Part 2: Concurrent roots and class unloading&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/i6olHB1kU4g" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The first part of this miniseries about Shenandoah GC in JDK 14 covered self-fixing barriers. This article discusses concurrent roots processing and concurrent class unloading, both of which aim to reduce GC pause time by moving GC work from the pause to a concurrent phase. Concurrent roots processing Once concurrent marking is done, Shenandoah needs [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/09/shenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading/"&gt;Shenandoah GC in JDK 14, Part 2: Concurrent roots and class unloading&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">684837</post-id><dc:creator>Roman Kennke</dc:creator><dc:date>2020-03-09T07:00:53Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/03/09/shenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading/</feedburner:origLink></entry><entry><title>Weekly Editorial 2019-03-06</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/XKdmLgO_uh4/weekly-editorial-2019-03-06" /><category term="byteman" scheme="searchisko:content:tags" /><category term="Camel" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="git" scheme="searchisko:content:tags" /><category term="infinispan" scheme="searchisko:content:tags" /><category term="weekly_editorial" scheme="searchisko:content:tags" /><author><name>lightguard</name></author><id>searchisko:content:id:jbossorg_blog-weekly_editorial_2019_03_06</id><updated>2020-03-06T18:34:46Z</updated><published>2020-03-06T18:34:00Z</published><content type="html">&lt;!-- [DocumentBodyStart:a45bd5d9-40c3-4c72-a0c3-67271e869ead] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;Welcome once again to another Weekly Editorial. We're still looking for a new home for this editorial, but we will certainly let you all know when we find it! Thank you for staying with us. Let's dive in!&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;New Releases&lt;/h2&gt;&lt;ul style="list-style-type: disc;"&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://infinispan.org/blog/2020/03/03/2020-03-03-infinispan-11.0.0.Alpha2/" rel="nofollow"&gt;Infinispan 11.0.0.Alpha2 and 10.1.3.Final&lt;/a&gt; - There's not much there for users in the new Alpha, mostly prep work, but the 10.1.3 version has a number of bug fixes&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://infinispan.org/blog/2020/02/24/2020-02-24-infinispan-operator-1.1.1/" rel="nofollow"&gt;Inifispan Operator 1.1.1.Final&lt;/a&gt; is out! This release focuses on bug fixes and performance improvements&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://bytemanblog.blogspot.com/2020/02/byteman-4011-has-been-released.html" rel="nofollow"&gt;Byteman has a new bug fix release out 4.0.11&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Blogs&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Eric Schabell has &lt;a class="jive-link-external-small" href="https://www.schabell.org/2020/03/integrating-saas-applications-example-crm-connector-integration.html" rel="nofollow"&gt;a new entry&lt;/a&gt; in his SaaS Integration series. In this entry he talks about connectors.&lt;/li&gt;&lt;li&gt;Eric also has &lt;a class="jive-link-external-small" href="https://www.schabell.org/2020/02/beginners-guilde-expanding-your-devops-toolbox-workshop.html" rel="nofollow"&gt;an update to his workshop toolbox&lt;/a&gt; if you're interested in the process automation space.&lt;/li&gt;&lt;li&gt;Claus Ibsen &lt;a class="jive-link-external-small" href="http://www.davsclaus.com/2020/02/upcoming-webinar-whats-new-in-apache.html" rel="nofollow"&gt;hosted a webinar about new features in Apache Camel 3&lt;/a&gt;. The event happened on March 3rd, but you can download the video on demand.&lt;/li&gt;&lt;li&gt;If you like the gritty details of Garbage Collection using the Shenandoah GC, head over to the &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/03/04/shenandoah-gc-in-jdk-14-part-1-self-fixing-barriers/" rel="nofollow"&gt;developers blog&lt;/a&gt; where a new series is starting!&lt;/li&gt;&lt;li&gt;Are you using Tekton and Maven and want to pull a little more speed out of those pipelines? &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/02/26/speed-up-maven-builds-in-tekton-pipelines/" rel="nofollow"&gt;Siamak Sadeghianfar has an article that tells you exactly how to do that&lt;/a&gt; this week.&lt;/li&gt;&lt;li&gt;Lastly, &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/02/25/how-to-ignore-files-in-git-without-gitignore/" rel="nofollow"&gt;Heiko Rupp explores how to ignore files in git without using the .gitignore file&lt;/a&gt;! Didn't know about that, did you?&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Once again, thank you everyone for staying with us. We're looking forward to more great content in a couple of weeks.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:a45bd5d9-40c3-4c72-a0c3-67271e869ead] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/XKdmLgO_uh4" height="1" width="1" alt=""/&gt;</content><summary>Welcome once again to another Weekly Editorial. We're still looking for a new home for this editorial, but we will certainly let you all know when we find it! Thank you for staying with us. Let's dive in! Â  New Releases Infinispan 11.0.0.Alpha2 and 10.1.3.Final - There's not much there for users in the new Alpha, mostly prep work, but the 10.1.3 version has a number of bug fixes Inifispan Operator...</summary><dc:creator>lightguard</dc:creator><dc:date>2020-03-06T18:34:00Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2020/03/06/weekly-editorial-2019-03-06</feedburner:origLink></entry><entry><title>Configure and run a QEMU-based VM outside of libvirt with virt-manager</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/FCl1Ms0R1Pk/" /><category term="DevOps" /><category term="Linux" /><category term="debug" /><category term="libvirt" /><category term="qemu" /><category term="virt-manager" /><author><name>Kevin Buettner</name></author><id>https://developers.redhat.com/blog/?p=682847</id><updated>2020-03-06T08:00:18Z</updated><published>2020-03-06T08:00:18Z</published><content type="html">&lt;p&gt;I recently needed to run a virtual machine (VM) created using &lt;a href="https://virt-manager.org/" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;virt-manager&lt;/code&gt;&lt;/a&gt; outside of &lt;a href="https://libvirt.org/" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;libvirt&lt;/code&gt;&lt;/a&gt;. I was investigating an issue that required running &lt;a href="https://www.qemu.org" target="_blank" rel="noopener noreferrer"&gt;QEMU&lt;/a&gt; with the machine option &lt;code&gt;dump-guest-core=on&lt;/code&gt;. By default, &lt;code&gt;libvirt&lt;/code&gt; runs with that option off, so I decided to set up a standalone QEMU environment. I found the process of configuring the test VM and writing the boot script more involved than expected, so I decided to document the steps I took.&lt;/p&gt; &lt;p&gt;I hope this article makes it easier for you to configure and run your own QEMU-based VM for similar investigations. Note that I do not recommend the approach described here for a VM running in production (at least, not without backup).&lt;br /&gt; &lt;span id="more-682847"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Create the test VM&lt;/h2&gt; &lt;p&gt;This article assumes that you created a VM with &lt;code&gt;virt-manager&lt;/code&gt; or another tool in the &lt;code&gt;libvirt&lt;/code&gt; framework. I advise against using a VM that you care about, so we&amp;#8217;ll start by using &lt;code&gt;virt-manager&lt;/code&gt; to create a test VM from scratch. Another option would be to use a clone of an existing VM.&lt;/p&gt; &lt;p&gt;The virtualization host that I used for my investigations was also a VM. If you want to do the same, you&amp;#8217;ll need to &lt;a href="https://docs.fedoraproject.org/en-US/quick-docs/using-nested-virtualization-in-kvm/" target="_blank" rel="noopener noreferrer"&gt;configure your virtualization environment to allow running nested VMs&lt;/a&gt;. (Follow the link for instructions for enabling nested virtualization on Fedora.) Running your virtualization host as a VM will make it easier to debug the virtualization host kernel if that is something you need to be able to do.&lt;/p&gt; &lt;h3&gt;Step 1: Install a guest OS using &lt;code&gt;virt-manager&lt;/code&gt;&amp;#8216;s New VM wizard&lt;/h3&gt; &lt;p&gt;The New VM wizard breaks down installation to five steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Name the guest VM and choose the installation type.&lt;/li&gt; &lt;li&gt;Locate and configure the installation media.&lt;/li&gt; &lt;li&gt;Choose memory and CPU settings.&lt;/li&gt; &lt;li&gt;Configure the virtual machine&amp;#8217;s storage.&lt;/li&gt; &lt;li&gt;Configure networking, architecture, and other hardware settings.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;I won&amp;#8217;t describe all the steps in detail because that has been done &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/virtualization_host_configuration_and_guest_installation_guide/chap-virtualization_host_configuration_and_guest_installation_guide-guest_installation_virt_manager-creating_guests_with_virt_manager" target="_blank" rel="noopener noreferrer"&gt;elsewhere&lt;/a&gt;. Instead, I offer the following tips:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;In step 3 of 5, &lt;strong&gt;Choose memory and CPU settings&lt;/strong&gt;, I usually choose the defaults. If you&amp;#8217;re going for a minimal install, or if your virtualization host doesn&amp;#8217;t have much memory (RAM), you might decrease the amount of memory from the default value.&lt;/li&gt; &lt;li&gt;In step 4 of 5, I leave the box labeled &lt;strong&gt;Enable storage for this virtual machine&lt;/strong&gt; checked, but decrease the storage space to 10GB. As noted earlier, my virtualization host is also a VM, and I do not usually allocate more than 60GB of storage for that host. If I want to install several VMs, I need to keep each one relatively small.&lt;/li&gt; &lt;li&gt;In step 5 of 5, on the &lt;strong&gt;Ready to begin the installation&lt;/strong&gt; screen, check the box labeled &lt;strong&gt;Customize configuration before install&lt;/strong&gt;. This action allows you to configure the chipset and firmware to your liking. As an example, if you want your new VM to boot using UEFI, you can change the &lt;strong&gt;Firmware&lt;/strong&gt; setting from &lt;code&gt;BIOS&lt;/code&gt; to &lt;code&gt;UEFI x86_64: /usr/share/edk2/ovmf/OVMF_CODE.fd&lt;/code&gt;. You might also want to change the &lt;strong&gt;Chipset&lt;/strong&gt;Â setting to &lt;code&gt;Q35&lt;/code&gt; (from &lt;code&gt;i440FX&lt;/code&gt;), assuming this value is not already the default.&lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you want to change your VM&amp;#8217;s chipset or firmware, do so before installing the OS.&lt;/p&gt; &lt;p&gt;I also find it useful to note the network interface&amp;#8217;s MAC address so that I can assign it a suitable name on the system that provides DHCP services.&lt;/p&gt; &lt;h3&gt;Step 2: Install the OS&lt;/h3&gt; &lt;p&gt;My only advice here is to make sure that you install whatever packages you need for testing purposes. Otherwise, I advise keeping things fairly minimal.&lt;/p&gt; &lt;h3&gt;Step 3: Boot and test the OS under &lt;code&gt;virt-manager&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;Make sure that your newly installed OS boots and that you can log in. If you want to test a particular facility using a standalone QEMU environment, make sure that this facility is also working.&lt;/p&gt; &lt;p&gt;In my case, I made sure that the network device was working and that I could log in via SSH. That way, I could make the VM headless and still log in to see that the setup still worked. In retrospect, this step might have been unnecessary due to turning on options that ultimately provided a console.&lt;/p&gt; &lt;h3&gt;Step 4: Reduce the size of the &lt;code&gt;virt-manager&lt;/code&gt; configuration&lt;/h3&gt; &lt;p&gt;Next, it&amp;#8217;s time to remove the clutter from the typical &lt;code&gt;virt-manager&lt;/code&gt; configuration. Doing this reduces the size of the QEMU command that we have to work with later on.&lt;/p&gt; &lt;p&gt;Figure 1 shows the hardware details for a VM that I named &lt;code&gt;F31-OVMF&lt;/code&gt;.&lt;/p&gt; &lt;div id="attachment_682857" style="width: 649px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-682857" class="wp-image-682857" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-at-2020-02-05-13-56-28.png" alt="Virt-manager window showing the hardware details for VM F31-OVMF" width="639" height="576" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-at-2020-02-05-13-56-28.png 847w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-at-2020-02-05-13-56-28-300x270.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-at-2020-02-05-13-56-28-768x692.png 768w" sizes="(max-width: 639px) 100vw, 639px" /&gt;&lt;p id="caption-attachment-682857" class="wp-caption-text"&gt;Figure 1: Virt-manager&amp;#8217;s default VM contains more devices than you probably need.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;I removed the following devices:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;SATA CDROM 1&lt;/li&gt; &lt;li&gt;Tablet&lt;/li&gt; &lt;li&gt;Display spice&lt;/li&gt; &lt;li&gt;Sound ich9&lt;/li&gt; &lt;li&gt;Serial 1&lt;/li&gt; &lt;li&gt;Channel qemu-ga&lt;/li&gt; &lt;li&gt;Channel spice&lt;/li&gt; &lt;li&gt;Video QXL&lt;/li&gt; &lt;li&gt;USB Redirector 1&lt;/li&gt; &lt;li&gt;USB Redirector 2&lt;/li&gt; &lt;li&gt;RNG /dev/urandom&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Note that not all devices can be removed. As an example, I clicked the &lt;strong&gt;Remove&lt;/strong&gt; button on &lt;code&gt;Controller VirtIO Serial 0&lt;/code&gt;, but &lt;code&gt;virt-manager&lt;/code&gt; added it back.&lt;/p&gt; &lt;p&gt;Figure 2 shows the resulting hardware details for &lt;code&gt;F31-OVMF&lt;/code&gt; once I finished removing devices.&lt;/p&gt; &lt;div id="attachment_682867" style="width: 649px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-682867" class="wp-image-682867" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-at-2020-02-05-14-15-25.png" alt="" width="639" height="576" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-at-2020-02-05-14-15-25.png 847w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-at-2020-02-05-14-15-25-300x270.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-at-2020-02-05-14-15-25-768x692.png 768w" sizes="(max-width: 639px) 100vw, 639px" /&gt;&lt;p id="caption-attachment-682867" class="wp-caption-text"&gt;Figure 2: A much cleaner VM hardware setup.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Boot the VM again and make sure that it still works. If you made the changes outlined above, the VM will boot headless and you will need to connect to it via SSH. &lt;em&gt;Do not skip this step.&lt;/em&gt; You still need to start the VM again in order to write &lt;code&gt;virt-manager&lt;/code&gt;&amp;#8216;s (now reduced) QEMU command to a log file.&lt;/p&gt; &lt;h2&gt;Create a boot script from the QEMU command&lt;/h2&gt; &lt;p&gt;With the test VM set up, the next thing to do is create the script you will use to start the VM in a standalone QEMU environment. You can use the QEMU command as the basis for your script, but you&amp;#8217;ll have to make a number of edits first. The biggest hurdle is identifying and removing any file descriptors that reference resources that are unavailable outside of &lt;code&gt;libvirt&lt;/code&gt;. Once again, I&amp;#8217;ll guide you through the steps.&lt;/p&gt; &lt;h3&gt;Step 1: Locate the QEMU log file on your virtualization host&lt;/h3&gt; &lt;p&gt;Log files for QEMU running under &lt;code&gt;libvirt&lt;/code&gt; or &lt;code&gt;virt-manager&lt;/code&gt; are found in &lt;code&gt;/var/log/libvirt/qemu&lt;/code&gt;. For my VM, this file is named &lt;code&gt;F31-OVMF.log&lt;/code&gt;. Locate this file and prepare to open it using your favorite text editor.&lt;/p&gt; &lt;h3&gt;Step 2: Copy lines from the log file to your new script&lt;/h3&gt; &lt;p&gt;Open the log file and scroll through it until you find the line that looks something like this:&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;code&gt;/usr/bin/qemu-system-x86_64 \&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Look above this line and identify all the environment variables that are set for running this command. These lines all end with a backslash character (&lt;code&gt;\&lt;/code&gt;). In my log file, the first environment variable line starts with &lt;code&gt;LC_ALL=C \&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Copy the lines starting from the first environment variable and ending at the bottom of the file. Paste these lines into a new file, skipping any obvious cruft from the bottom of the log file. This will be the script that you run to start the VM as a standalone QEMU environment, so I suggest naming it something like &lt;code&gt;start-&amp;#60;VM&amp;#62;&lt;/code&gt;. I named my file &lt;code&gt;start-F31-OVMF&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This is what my soon-to-be script looks like, so far:&lt;/p&gt; &lt;pre&gt;LC_ALL=C \ PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin \ HOME=/var/lib/libvirt/qemu/domain-3-F31-OVMF \ XDG_DATA_HOME=/var/lib/libvirt/qemu/domain-3-F31-OVMF/.local/share \ XDG_CACHE_HOME=/var/lib/libvirt/qemu/domain-3-F31-OVMF/.cache \ XDG_CONFIG_HOME=/var/lib/libvirt/qemu/domain-3-F31-OVMF/.config \ QEMU_AUDIO_DRV=none \ /usr/bin/qemu-system-x86_64 \ -name guest=F31-OVMF,debug-threads=on \ -S \ -object secret,id=masterKey0,format=raw,file=/var/lib/libvirt/qemu/domain-3-F31-OVMF/master-key.aes \ -machine pc-q35-4.1,accel=kvm,usb=off,vmport=off,dump-guest-core=off \ -cpu EPYC-IBPB,x2apic=on,tsc-deadline=on,hypervisor=on,tsc-adjust=on,arch-capabilities=on,cmp-legacy=on,perfctr-core=on,virt-ssbd=on,rdctl-no=on,skip-l1dfl-vmentry=on,mds-no=on,monitor=off \ -drive file=/usr/share/edk2/ovmf/OVMF_CODE.fd,if=pflash,format=raw,unit=0,readonly=on \ -drive file=/var/lib/libvirt/qemu/nvram/F31-OVMF_VARS.fd,if=pflash,format=raw,unit=1 \ -m 2048 \ -overcommit mem-lock=off \ -smp 2,sockets=2,cores=1,threads=1 \ -uuid cbfc504c-69e7-4955-9e42-c96acfcd4f20 \ -display none \ -no-user-config \ -nodefaults \ -chardev socket,id=charmonitor,fd=37,server,nowait \ -mon chardev=charmonitor,id=monitor,mode=control \ -rtc base=utc,driftfix=slew \ -global kvm-pit.lost_tick_policy=delay \ -no-hpet \ -no-shutdown \ -global ICH9-LPC.disable_s3=1 \ -global ICH9-LPC.disable_s4=1 \ -boot strict=on \ -device pcie-root-port,port=0x10,chassis=1,id=pci.1,bus=pcie.0,multifunction=on,addr=0x2 \ -device pcie-root-port,port=0x11,chassis=2,id=pci.2,bus=pcie.0,addr=0x2.0x1 \ -device pcie-root-port,port=0x12,chassis=3,id=pci.3,bus=pcie.0,addr=0x2.0x2 \ -device pcie-root-port,port=0x13,chassis=4,id=pci.4,bus=pcie.0,addr=0x2.0x3 \ -device pcie-root-port,port=0x14,chassis=5,id=pci.5,bus=pcie.0,addr=0x2.0x4 \ -device pcie-root-port,port=0x15,chassis=6,id=pci.6,bus=pcie.0,addr=0x2.0x5 \ -device pcie-root-port,port=0x16,chassis=7,id=pci.7,bus=pcie.0,addr=0x2.0x6 \ -device qemu-xhci,p2=15,p3=15,id=usb,bus=pci.2,addr=0x0 \ -device virtio-serial-pci,id=virtio-serial0,bus=pci.3,addr=0x0 \ -drive file=/var/lib/libvirt/images/F31-OVMF.qcow2,format=qcow2,if=none,id=drive-virtio-disk0 \ -device virtio-blk-pci,scsi=off,bus=pci.4,addr=0x0,drive=drive-virtio-disk0,id=virtio-disk0,bootindex=1 \ -netdev tap,fd=39,id=hostnet0,vhost=on,vhostfd=40 \ -device virtio-net-pci,netdev=hostnet0,id=net0,mac=52:54:00:c9:2d:4f,bus=pci.1,addr=0x0 \ -device virtio-balloon-pci,id=balloon0,bus=pci.5,addr=0x0 \ -sandbox on,obsolete=deny,elevateprivileges=deny,spawn=deny,resourcecontrol=deny \ -msg timestamp=on&lt;/pre&gt; &lt;h3&gt;Step 3: Create the shell script&lt;/h3&gt; &lt;p&gt;Next, edit this log file into a workable shell script by doing the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Add &lt;code&gt;#!/bin/sh&lt;/code&gt; as the file&amp;#8217;s first line. I also add a blank line after this one, but that&amp;#8217;s not strictly necessary.&lt;/li&gt; &lt;li&gt;Adjust the environment variable section: &lt;ul&gt; &lt;li&gt;Remove the backslash (&lt;code&gt;\&lt;/code&gt;)Â character from the end of each environment variable line.&lt;/li&gt; &lt;li&gt;Place the word &lt;code&gt;export&lt;/code&gt; followed by a space at the beginning of each of these lines.&lt;/li&gt; &lt;li&gt;Add a blank line at the end of this section.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Use a leading &lt;code&gt;#&lt;/code&gt; character to comment out the &lt;code&gt;export PATH=&lt;/code&gt; and &lt;code&gt;export HOME=&lt;/code&gt; lines. (It might be possible to disable other lines that set environment variables, but I have not tested doing this.)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The beginning of my script now looks like this:&lt;/p&gt; &lt;pre&gt;#!/bin/sh &lt;/pre&gt; &lt;pre&gt;export LC_ALL=C #export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin #export HOME=/var/lib/libvirt/qemu/domain-3-F31-OVMF export XDG_DATA_HOME=/var/lib/libvirt/qemu/domain-3-F31-OVMF/.local/share export XDG_CACHE_HOME=/var/lib/libvirt/qemu/domain-3-F31-OVMF/.cache export XDG_CONFIG_HOME=/var/lib/libvirt/qemu/domain-3-F31-OVMF/.config export QEMU_AUDIO_DRV=none /usr/bin/qemu-system-x86_64 \&lt;/pre&gt; &lt;p&gt;Now scroll down the file and edit the following from the &lt;code&gt;qemu-system-x86_64&lt;/code&gt; command:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Delete the line starting with &lt;code&gt;-object secret&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Delete the line starting with &lt;code&gt;-chardev socket&lt;/code&gt;. (This line references a file descriptor that is not accessible outside of the &lt;code&gt;libvirt&lt;/code&gt; environment.)&lt;/li&gt; &lt;li&gt;Delete the line starting with &lt;code&gt;-sandbox&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Delete the line starting with &lt;code&gt;-mon&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Change the line &lt;code&gt;-display none&lt;/code&gt; to &lt;code&gt;-display gtk&lt;/code&gt;. Make sure you leave the trailing backslash at the end of this line.&lt;/li&gt; &lt;li&gt;Change the &lt;code&gt;-netdev tap&lt;/code&gt; line to &lt;code&gt;netdev bridge,id=ID&lt;/code&gt;, where &lt;code&gt;ID&lt;/code&gt; is the same as the &lt;code&gt;id&lt;/code&gt; in the original &lt;code&gt;-netdev tap&lt;/code&gt; line. In this case, it&amp;#8217;s &lt;code&gt;hostnet0&lt;/code&gt;, so the line in question changes from:&lt;/li&gt; &lt;/ul&gt; &lt;pre style="padding-left: 40px;"&gt;-netdev tap,fd=39,id=hostnet0,vhost=on,vhostfd=40 \ &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;to:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;-netdev bridge,id=hostnet0 \&lt;/pre&gt; &lt;p&gt;Note that this change removes another &lt;code&gt;fd= argument&lt;/code&gt; from the overall command. Again, this line references a file descriptor that is not available from the standalone environment outside of &lt;code&gt;libvirt&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Also note that, for this change to work, it&amp;#8217;s necessary to have a bridge named &lt;code&gt;br0&lt;/code&gt; configured on the virtualization host. For a bridge named something else, like &lt;code&gt;br1&lt;/code&gt;, use the following instead:&lt;/p&gt; &lt;pre&gt;-netdev bridge,id=hostnet0,bridge=br1&lt;/pre&gt; &lt;p&gt;Consult the &lt;a href="https://www.qemu.org/docs/master/qemu-doc.html#Network-options" target="_blank" rel="noopener noreferrer"&gt;QEMU network options documentation&lt;/a&gt; for further information.&lt;/p&gt; &lt;p&gt;You&amp;#8217;re nearly done editing, but you have a few more options for simplifying the script. First, you can search the file for &lt;code&gt;fd=&lt;/code&gt;. Hopefully, there won&amp;#8217;t be any occurrences, but if there are, you need to figure out how to safely remove these references to file descriptors. You might try deleting the lines in question. If that doesn&amp;#8217;t work, consult the &lt;a href="https://www.qemu.org/docs/master/qemu-doc.html" target="_blank" rel="noopener noreferrer"&gt;QEMU documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Second, you could remove the &lt;code&gt;-nodefaults&lt;/code&gt; line. (With this line gone, you probably could simplify the script even more, but I&amp;#8217;ve haven&amp;#8217;t explored that option.)&lt;/p&gt; &lt;p&gt;Now, make the script executable. For my example script, I used:&lt;/p&gt; &lt;pre&gt;# chmod a+x start-F31-OVMF&lt;/pre&gt; &lt;p&gt;Finally, with all of the edits in place, this is what my script looks like:&lt;/p&gt; &lt;pre&gt;#!/bin/sh export LC_ALL=C #export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin #export HOME=/var/lib/libvirt/qemu/domain-3-F31-OVMF export XDG_DATA_HOME=/var/lib/libvirt/qemu/domain-3-F31-OVMF/.local/share export XDG_CACHE_HOME=/var/lib/libvirt/qemu/domain-3-F31-OVMF/.cache export XDG_CONFIG_HOME=/var/lib/libvirt/qemu/domain-3-F31-OVMF/.config export QEMU_AUDIO_DRV=none /usr/bin/qemu-system-x86_64 \ -name guest=F31-OVMF,debug-threads=on \ -S \ -machine pc-q35-4.1,accel=kvm,usb=off,vmport=off,dump-guest-core=off \ -cpu EPYC-IBPB,x2apic=on,tsc-deadline=on,hypervisor=on,tsc-adjust=on,arch-capabilities=on,cmp-legacy=on,perfctr-core=on,virt-ssbd=on,rdctl-no=on,skip-l1dfl-vmentry=on,mds-no=on,monitor=off \ -drive file=/usr/share/edk2/ovmf/OVMF_CODE.fd,if=pflash,format=raw,unit=0,readonly=on \ -drive file=/var/lib/libvirt/qemu/nvram/F31-OVMF_VARS.fd,if=pflash,format=raw,unit=1 \ -m 2048 \ -overcommit mem-lock=off \ -smp 2,sockets=2,cores=1,threads=1 \ -uuid cbfc504c-69e7-4955-9e42-c96acfcd4f20 \ -display gtk \ -no-user-config \ -rtc base=utc,driftfix=slew \ -global kvm-pit.lost_tick_policy=delay \ -no-hpet \ -no-shutdown \ -global ICH9-LPC.disable_s3=1 \ -global ICH9-LPC.disable_s4=1 \ -boot strict=on \ -device pcie-root-port,port=0x10,chassis=1,id=pci.1,bus=pcie.0,multifunction=on,addr=0x2 \ -device pcie-root-port,port=0x11,chassis=2,id=pci.2,bus=pcie.0,addr=0x2.0x1 \ -device pcie-root-port,port=0x12,chassis=3,id=pci.3,bus=pcie.0,addr=0x2.0x2 \ -device pcie-root-port,port=0x13,chassis=4,id=pci.4,bus=pcie.0,addr=0x2.0x3 \ -device pcie-root-port,port=0x14,chassis=5,id=pci.5,bus=pcie.0,addr=0x2.0x4 \ -device pcie-root-port,port=0x15,chassis=6,id=pci.6,bus=pcie.0,addr=0x2.0x5 \ -device pcie-root-port,port=0x16,chassis=7,id=pci.7,bus=pcie.0,addr=0x2.0x6 \ -device qemu-xhci,p2=15,p3=15,id=usb,bus=pci.2,addr=0x0 \ -device virtio-serial-pci,id=virtio-serial0,bus=pci.3,addr=0x0 \ -drive file=/var/lib/libvirt/images/F31-OVMF.qcow2,format=qcow2,if=none,id=drive-virtio-disk0 \ -device virtio-blk-pci,scsi=off,bus=pci.4,addr=0x0,drive=drive-virtio-disk0,id=virtio-disk0,bootindex=1 \ -netdev bridge,id=hostnet0 \ -device virtio-net-pci,netdev=hostnet0,id=net0,mac=52:54:00:c9:2d:4f,bus=pci.1,addr=0x0 \ -device virtio-balloon-pci,id=balloon0,bus=pci.5,addr=0x0 \ -msg timestamp=on&lt;/pre&gt; &lt;h3&gt;Step 4: Run the VM using your newly created script&lt;/h3&gt; &lt;p&gt;As root, run your new script. I ran mine as follows:&lt;/p&gt; &lt;pre&gt;[root@f31-2 ~]# ./start-F31-OVMF&lt;/pre&gt; &lt;p&gt;If it works, a window similar to Figure 3 pops up.&lt;/p&gt; &lt;div id="attachment_682877" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-682877" class="wp-image-682877" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-at-2020-02-05-15-26-04.png" alt="virt-manager VM window paused at the display warning" width="640" height="533" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-at-2020-02-05-15-26-04.png 642w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-at-2020-02-05-15-26-04-300x250.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-682877" class="wp-caption-text"&gt;Figure 3: Virt-manager pauses the VM&amp;#8217;s launch for warnings.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Select &lt;strong&gt;Machine&lt;/strong&gt; -&amp;#62; &lt;strong&gt;Pause&lt;/strong&gt; to cancel the pause and continue the boot process. At this point, the machine should boot and, ultimately, you should see a login prompt as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_682897" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-682897" class="wp-image-682897 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-at-2020-02-05-15-32-15-1024x821.png" alt="virt-manager window reaching the VM's login" width="640" height="513" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-at-2020-02-05-15-32-15-1024x821.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-at-2020-02-05-15-32-15-300x241.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-at-2020-02-05-15-32-15-768x616.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-at-2020-02-05-15-32-15.png 1026w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-682897" class="wp-caption-text"&gt;Figure 4: Your new VM&amp;#8217;s login screen.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Log in and make sure that the VM functions as expected.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;You should now have a workable script for booting your VM in a standalone QEMU environment. The next steps depend on your use case. In my case, I modified the &lt;code&gt;dump-guest-core&lt;/code&gt; option, changing the value from &lt;code&gt;off&lt;/code&gt; to &lt;code&gt;on&lt;/code&gt;, and then proceeded with my investigations.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F06%2Fconfigure-and-run-a-qemu-based-vm-outside-of-libvirt%2F&amp;#38;linkname=Configure%20and%20run%20a%20QEMU-based%20VM%20outside%20of%20libvirt%20with%20virt-manager" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F06%2Fconfigure-and-run-a-qemu-based-vm-outside-of-libvirt%2F&amp;#38;linkname=Configure%20and%20run%20a%20QEMU-based%20VM%20outside%20of%20libvirt%20with%20virt-manager" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F06%2Fconfigure-and-run-a-qemu-based-vm-outside-of-libvirt%2F&amp;#38;linkname=Configure%20and%20run%20a%20QEMU-based%20VM%20outside%20of%20libvirt%20with%20virt-manager" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F06%2Fconfigure-and-run-a-qemu-based-vm-outside-of-libvirt%2F&amp;#38;linkname=Configure%20and%20run%20a%20QEMU-based%20VM%20outside%20of%20libvirt%20with%20virt-manager" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F06%2Fconfigure-and-run-a-qemu-based-vm-outside-of-libvirt%2F&amp;#38;linkname=Configure%20and%20run%20a%20QEMU-based%20VM%20outside%20of%20libvirt%20with%20virt-manager" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F06%2Fconfigure-and-run-a-qemu-based-vm-outside-of-libvirt%2F&amp;#38;linkname=Configure%20and%20run%20a%20QEMU-based%20VM%20outside%20of%20libvirt%20with%20virt-manager" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F06%2Fconfigure-and-run-a-qemu-based-vm-outside-of-libvirt%2F&amp;#38;linkname=Configure%20and%20run%20a%20QEMU-based%20VM%20outside%20of%20libvirt%20with%20virt-manager" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F06%2Fconfigure-and-run-a-qemu-based-vm-outside-of-libvirt%2F&amp;#038;title=Configure%20and%20run%20a%20QEMU-based%20VM%20outside%20of%20libvirt%20with%20virt-manager" data-a2a-url="https://developers.redhat.com/blog/2020/03/06/configure-and-run-a-qemu-based-vm-outside-of-libvirt/" data-a2a-title="Configure and run a QEMU-based VM outside of libvirt with virt-manager"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/06/configure-and-run-a-qemu-based-vm-outside-of-libvirt/"&gt;Configure and run a QEMU-based VM outside of libvirt with virt-manager&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/FCl1Ms0R1Pk" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;I recently needed to run a virtual machine (VM) created using virt-manager outside of libvirt. I was investigating an issue that required running QEMU with the machine option dump-guest-core=on. By default, libvirt runs with that option off, so I decided to set up a standalone QEMU environment. I found the process of configuring the test [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/06/configure-and-run-a-qemu-based-vm-outside-of-libvirt/"&gt;Configure and run a QEMU-based VM outside of libvirt with virt-manager&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">682847</post-id><dc:creator>Kevin Buettner</dc:creator><dc:date>2020-03-06T08:00:18Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/03/06/configure-and-run-a-qemu-based-vm-outside-of-libvirt/</feedburner:origLink></entry><entry><title>C# 8 nullable reference types</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/rKI6ggMowOw/" /><category term=".NET Core" /><category term="C#" /><category term="Programming Languages" /><category term=".NET Core 3.1" /><category term="C# 8" /><category term="nullable" /><category term="RHEL" /><author><name>Tom Deseyn</name></author><id>https://developers.redhat.com/blog/?p=676537</id><updated>2020-03-05T08:00:20Z</updated><published>2020-03-05T08:00:20Z</published><content type="html">&lt;p&gt;In the previous article, we discussed &lt;a href="https://developers.redhat.com/blog/2020/03/03/c-8-default-interface-methods/" target="_blank" rel="noopener noreferrer"&gt;C# 8 default interface methods&lt;/a&gt;. In this article, weâ€™ll look at C# 8 nullable reference types. Reference types refer to an object that is on the heap. When there is no object to refer to, the value is &lt;code&gt;null&lt;/code&gt;. Sometimes &lt;code&gt;null&lt;/code&gt; is an acceptable value, but often it is an illegal value that leads to &lt;code&gt;ArgumentNullExceptions&lt;/code&gt; and &lt;code&gt;NullReferenceExceptions&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;C# 8 finally gives us the ability to express whether a variable shouldnâ€™t be &lt;code&gt;null&lt;/code&gt;, and when it can be &lt;code&gt;null&lt;/code&gt;. Based on these annotations, the compiler will warn you when you are potentially using a &lt;code&gt;null&lt;/code&gt; reference, or passing a &lt;code&gt;null&lt;/code&gt; reference to a function that wonâ€™t accept it.&lt;/p&gt; &lt;p&gt;&lt;span id="more-676537"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;To enable the feature, you must add the following line in the project file (&lt;code&gt;csproj&lt;/code&gt;) &lt;code&gt;PropertyGroup&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&amp;#60;Nullable&amp;#62;enable&amp;#60;/Nullable&amp;#62; &lt;/pre&gt; &lt;p&gt;Other values than &lt;code&gt;enable&lt;/code&gt; are possible and make the compiler a bit more relaxed. Itâ€™s also possible to change this setting per file. See the &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references#nullable-contexts" target="_blank" rel="noopener noreferrer"&gt;nullable context&lt;/a&gt; documentation for more information.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;?&lt;/code&gt; character is used to indicate when a type might be &lt;code&gt;null&lt;/code&gt;. When the &lt;code&gt;?&lt;/code&gt; character is not present, the type is assumed to be non-nullable:&lt;/p&gt; &lt;pre&gt;MyClass? mayBeNull = null; MyClass mayNotBeNull = new MyClass(); &lt;/pre&gt; &lt;p&gt;We can also use this syntax for method arguments and return values:&lt;/p&gt; &lt;pre&gt;static MyClass Foo(MyClass? mayBeNull) { return mayBeNull ?? new MyClass(); } &lt;/pre&gt; &lt;p&gt;The method &lt;code&gt;Foo&lt;/code&gt; accepts an argument that might be &lt;code&gt;null&lt;/code&gt;, and returns an argument that is not.&lt;/p&gt; &lt;p&gt;The compiler doesnâ€™t just rely on the type declaration. It also follows the code paths to understand when a type will no longer be &lt;code&gt;null&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;static void Bar(MyClass? arg) { if (arg == null) { throw new ArgumentNullException(nameof(arg)); } arg.Method(); } &lt;/pre&gt; &lt;p&gt;In this example, the compiler understands that &lt;code&gt;arg&lt;/code&gt; cannot be &lt;code&gt;null&lt;/code&gt; when we call &lt;code&gt;arg.Method&lt;/code&gt; since weâ€™ve thrown for that earlier. If we leave out the &lt;code&gt;null&lt;/code&gt; check, then we get a warning for the &lt;code&gt;arg.Method&lt;/code&gt; call:&lt;/p&gt; &lt;p&gt;&lt;code&gt;CS8602: Dereference of a possibly null reference&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Suppose that we had accidentally missed typing the &lt;code&gt;throw&lt;/code&gt; keyword. In that case, we would also get that warning.&lt;/p&gt; &lt;p&gt;There might be cases where the compiler doesnâ€™t understand that a variable can no longer be &lt;code&gt;null&lt;/code&gt;. For example, if your class allows one method to only be called in a state where you are sure that a field has already been set. We can pass this information to the compiler using the &lt;code&gt;null&lt;/code&gt;-forgiving operator (&lt;code&gt;!&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;string scheme = _uri!.Scheme; // _uri is of type Uri? int port = _uri.Port; &lt;/pre&gt; &lt;p&gt;Because we used the &lt;code&gt;!&lt;/code&gt; operator on the variable, the compiler knows it&amp;#8217;s safe. We don&amp;#8217;t need to use the &lt;code&gt;null&lt;/code&gt;-forgiving operator on the next line when we access &lt;code&gt;Port&lt;/code&gt;. The compiler infers that &lt;code&gt;_uri&lt;/code&gt; can no longer be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The nullable annotations added to the method argument become part of the assembly as &lt;code&gt;Attributes&lt;/code&gt;. .NET Core base libraries are being updated to include these annotations.&lt;/p&gt; &lt;p&gt;The compiler inspects within a method. When the method has strong guarantees regarding how it behaves for nullable arguments, the method can be augmented with &lt;code&gt;Attributes&lt;/code&gt; that express this:&lt;/p&gt; &lt;pre&gt;static void Bar(MyClass? arg) { if (arg == null) { ThrowArgumentNull(nameof(arg)); } arg.Method(); } [DoesNotReturn] public static void ThrowArgumentNull(string paramName) { throw new ArgumentNullException(paramName); } &lt;/pre&gt; &lt;p&gt;In this simple example, we use the &lt;code&gt;DoesNotReturn&lt;/code&gt; attribute, which tells the compiler that &lt;code&gt;arg&lt;/code&gt; wonâ€™t be &lt;code&gt;null&lt;/code&gt; past the &lt;code&gt;if&lt;/code&gt; block because &lt;code&gt;ThrowArgumentNull&lt;/code&gt; never returns. Some attributes can be conditional on values. For example, &lt;code&gt;string.IsNullOrEmpty&lt;/code&gt; is annotated as follows:&lt;/p&gt; &lt;pre&gt;public static bool IsNullOrEmpty([NotNullWhenAttribute(false)] string? value) &lt;/pre&gt; &lt;p&gt;This annotation makes the compiler understand that the &lt;code&gt;value&lt;/code&gt; argument isnâ€™t &lt;code&gt;null&lt;/code&gt; when this method returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can find these attributes and more in the &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis?view=netcore-3.1" target="_blank" rel="noopener noreferrer"&gt;System.Diagnostics.CodeAnalysis&lt;/a&gt; namespace. These attributes are available in .NET Core 3.x (and &lt;code&gt;netstandard2.1&lt;/code&gt;).&lt;/p&gt; &lt;h1&gt;Conclusion&lt;/h1&gt; &lt;p&gt;C# 8 provides us with a mechanism to express when a reference type might be &lt;code&gt;null&lt;/code&gt; and when it is not. Thanks to these annotations, we can now express the nullability expectations of APIs. The compiler uses this information to provide warnings that could otherwise cause unexpected exceptions at runtime.&lt;/p&gt; &lt;p&gt;C# 8 can be used with the .NET Core 3.1 SDK, which is available on &lt;a href="https://access.redhat.com/documentation/en-us/net_core/" target="_blank" rel="noopener noreferrer"&gt;RHEL&lt;/a&gt;, &lt;a href="http://fedoraloves.net/" target="_blank" rel="noopener noreferrer"&gt;Fedora&lt;/a&gt;, &lt;a href="https://dotnet.microsoft.com/download" target="_blank" rel="noopener noreferrer"&gt;Windows, macOS, and other Linux distributions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F05%2Fc-8-nullable-reference-types%2F&amp;#38;linkname=C%23%208%20nullable%20reference%20types" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F05%2Fc-8-nullable-reference-types%2F&amp;#38;linkname=C%23%208%20nullable%20reference%20types" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F05%2Fc-8-nullable-reference-types%2F&amp;#38;linkname=C%23%208%20nullable%20reference%20types" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F05%2Fc-8-nullable-reference-types%2F&amp;#38;linkname=C%23%208%20nullable%20reference%20types" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F05%2Fc-8-nullable-reference-types%2F&amp;#38;linkname=C%23%208%20nullable%20reference%20types" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F05%2Fc-8-nullable-reference-types%2F&amp;#38;linkname=C%23%208%20nullable%20reference%20types" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F05%2Fc-8-nullable-reference-types%2F&amp;#38;linkname=C%23%208%20nullable%20reference%20types" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F05%2Fc-8-nullable-reference-types%2F&amp;#038;title=C%23%208%20nullable%20reference%20types" data-a2a-url="https://developers.redhat.com/blog/2020/03/05/c-8-nullable-reference-types/" data-a2a-title="C# 8 nullable reference types"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/05/c-8-nullable-reference-types/"&gt;C# 8 nullable reference types&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/rKI6ggMowOw" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In the previous article, we discussed C# 8 default interface methods. In this article, weâ€™ll look at C# 8 nullable reference types. Reference types refer to an object that is on the heap. When there is no object to refer to, the value is null. Sometimes null is an acceptable value, but often it is [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/05/c-8-nullable-reference-types/"&gt;C# 8 nullable reference types&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">676537</post-id><dc:creator>Tom Deseyn</dc:creator><dc:date>2020-03-05T08:00:20Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/03/05/c-8-nullable-reference-types/</feedburner:origLink></entry><entry><title>Integrating with SaaS Applications - Example CRM Connector Integration</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Du50MrVk4vs/integrating-saas-applications-example-crm-connector-integration.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-integrating_with_saas_applications_example_crm_connector_integration</id><updated>2020-03-05T06:00:02Z</updated><published>2020-03-05T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-AzXG8srNP44/Xj-t6bgALLI/AAAAAAAABnw/lgKidHnFpYYF8hikQzFZIgT313nlBAgiACLcBGAsYHQ/s1600/integrate-saas-apps-ld.png" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="integrating with SaaS applications" border="0" data-original-height="900" data-original-width="1600" height="180" src="https://1.bp.blogspot.com/-AzXG8srNP44/Xj-t6bgALLI/AAAAAAAABnw/lgKidHnFpYYF8hikQzFZIgT313nlBAgiACLcBGAsYHQ/s320/integrate-saas-apps-ld.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Part 4 - Example CRM connector integration&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The previous article in this series looked at &lt;a href="https://www.schabell.org/2020/02/integrating-saas-applications-example-crm-integration.html" target="_blank"&gt;a SaaS CRM integration example.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;The foundation for this logical diagram was researching a use case where customers were successful with a portfolio solution.&lt;br /&gt;&lt;br /&gt;It's a starting point for the generic architectural blueprint that rises from several customer solution that were researched.&lt;br /&gt;&lt;br /&gt;Having completed the outline of the blueprint details and the resulting logical diagram elements, it's now time to take a look as specific examples. &lt;br /&gt;&lt;br /&gt;In this article we'll go a little deeper than the previous example integration with a SaaS customer relationship management (CRM) applications, exposing how a connector can be tailored to your specific integration needs. &lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Blueprint scenarios&lt;/h3&gt;As a reminder, the architectural details covered here are base on real customer integration solutions using open source technologies.&lt;br /&gt;&lt;br /&gt;The example scenario presented here is a generic common blueprint that was uncovered researching customer solutions. It's my intent to provide a blueprint that provides guidance and not deep technical details.&lt;br /&gt;&lt;br /&gt;This section covers the visual representations as presented. There are many ways to represent each element in this architectural blueprint, but I've chosen icons, text and colors that I hope are going to make it all easy to absorb. Feel free to post comments at the bottom of this post, or &lt;a href="https://www.schabell.org/p/contact.html" target="_blank"&gt;contact me directly&lt;/a&gt; with your feedback.&lt;br /&gt;&lt;br /&gt;Now let's take a look at the details in this blueprint and outline the solution.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Integrating using connectors&lt;/h3&gt;The example blueprint shown in figure titled &lt;i&gt;Example: External CRM Integration&lt;/i&gt; outlines how to integrate an external SaaS CRM application in to your architecture. Note that this diagram is focusing narrowly on the aspects related to integrating with an external SaaS CRM application, therefore it's detailing a small set of integration components.&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-L8bh3a6QIUg/Xk0-W0_RmSI/AAAAAAAAw5c/8UQfJCmRsrkLDCo7HlSnPsgAB_4mVMauwCNcBGAsYHQ/s1600/crm-saas-integration.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="integrating with CRM applications" border="0" data-original-height="825" data-original-width="1600" height="165" src="https://1.bp.blogspot.com/-L8bh3a6QIUg/Xk0-W0_RmSI/AAAAAAAAw5c/8UQfJCmRsrkLDCo7HlSnPsgAB_4mVMauwCNcBGAsYHQ/s320/crm-saas-integration.png" title="" width="320" /&gt;&lt;/a&gt;&lt;br /&gt;While it's common to represent a collection of integration microservices as the point of contact for your external CRM systems, it's not clear how that's done. While the specific details of connecting to a specific CRM system goes beyond the details of this architectural blueprint, it's not out of scope to expand one level deeper and expose a specific integration &lt;i&gt;connector.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;The example blueprint shown in figure titled &lt;i&gt;Example: External CRM Connector Integration&lt;/i&gt; shows how a specific integration connector has been implemented. This specific connector is tied closely to the external SaaS CRM's provided API and can ensure data and communications with your organizations internal applications. &lt;br /&gt;&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-uKRcAW_d94U/Xl0LaGg4jLI/AAAAAAAAw8c/J_rJ3wtYE6keyIycQQ2xPtdgtXB5yUzoACNcBGAsYHQ/s1600/saas-integration-connectors.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="integrating with CRM connectors" border="0" data-original-height="804" data-original-width="1600" height="160" src="https://1.bp.blogspot.com/-uKRcAW_d94U/Xl0LaGg4jLI/AAAAAAAAw8c/J_rJ3wtYE6keyIycQQ2xPtdgtXB5yUzoACNcBGAsYHQ/s320/saas-integration-connectors.png" title="" width="320" /&gt;&lt;/a&gt;For example, if you are connecting to an external CRM such as Salesforce, you could find that your integration needs are more specific than the existing microservices collection can handle. In this case it make sense to facilitate the specific integration needs with a specific Salesforce connector.&lt;br /&gt;&lt;br /&gt;Implementation details are left up to the reader to quantify as each organizations needs and usage of a specific SaaS CRM can not be captured in a generic architectural blueprint beyond the above.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;What's next&lt;/h3&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;An overview of the series on integrating SaaS applications portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/01/integrating-saas-applications-an-introduction.html" target="_blank"&gt;An introduction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/02/integrating-saas-applications-common-architectural-elements.html" target="_blank"&gt;Common architectural elements&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/02/integrating-saas-applications-example-crm-integration.html" target="_blank"&gt;Example CRM integration&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/03/integrating-saas-applications-example-crm-connector-integration.html" target="_blank"&gt;Example CRM connector integration&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Example 3rd-party platform integration&lt;/li&gt;&lt;li&gt;Example processes with 3rd-party platform integration&lt;/li&gt;&lt;/ol&gt;Catch up on any articles you missed by following one of the links above.&lt;br /&gt;&lt;br /&gt;Next in this series, taking a look at integration with 3rd-party SaaS or SaaS-like platforms.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Chg5EU01bvo:N60g0-q4dxI:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Chg5EU01bvo:N60g0-q4dxI:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Chg5EU01bvo:N60g0-q4dxI:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=Chg5EU01bvo:N60g0-q4dxI:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Chg5EU01bvo:N60g0-q4dxI:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=Chg5EU01bvo:N60g0-q4dxI:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Chg5EU01bvo:N60g0-q4dxI:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=Chg5EU01bvo:N60g0-q4dxI:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Chg5EU01bvo:N60g0-q4dxI:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Chg5EU01bvo:N60g0-q4dxI:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=Chg5EU01bvo:N60g0-q4dxI:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/Chg5EU01bvo" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Du50MrVk4vs" height="1" width="1" alt=""/&gt;</content><summary>Part 4 - Example CRM connector integrationThe previous article in this series looked at a SaaS CRM integration example. The foundation for this logical diagram was researching a use case where customers were successful with a portfolio solution. It's a starting point for the generic architectural blueprint that rises from several customer solution that were researched. Having completed the outline...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-03-05T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/Chg5EU01bvo/integrating-saas-applications-example-crm-connector-integration.html</feedburner:origLink></entry><entry><title>Shenandoah GC in JDK 14, Part 1: Self-fixing barriers</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/f88rGx1GSMs/" /><category term="Developer Tools" /><category term="Java" /><category term="Performance" /><category term="JDK 14" /><category term="mid-path" /><category term="self-fixing barriers" /><category term="Shenandoah GC" /><category term="slow path" /><author><name>Roman Kennke</name></author><id>https://developers.redhat.com/blog/?p=684157</id><updated>2020-03-04T08:00:13Z</updated><published>2020-03-04T08:00:13Z</published><content type="html">&lt;p&gt;The development of the &lt;a href="https://wiki.openjdk.java.net/display/shenandoah/Main" target="_blank" rel="noopener noreferrer"&gt;Shenandoah Garbage Collector&lt;/a&gt; (GC) in the upcoming &lt;a href="https://openjdk.java.net/projects/jdk/14/" target="_blank" rel="noopener noreferrer"&gt;JDK 14&lt;/a&gt; has seen significant improvements. The first one covered here (self-fixing barriers) aims to reduce local latencies that are spent in barrier mid- and slow paths. The second will cover concurrent root processing and concurrent class unloading.&lt;/p&gt; &lt;h2&gt;Self-fixing barriers&lt;/h2&gt; &lt;p&gt;The self-fixing barriers improvement builds on the &lt;a href="https://developers.redhat.com/blog/2019/06/27/shenandoah-gc-in-jdk-13-part-1-load-reference-barriers/" target="_blank" rel="noopener noreferrer"&gt;load reference barriers&lt;/a&gt; that went into JDK 13. A load reference barrier is employed after a load from a reference field or array element and before the loaded object is given to the rest of the application code. In pseudocode, the barrier looks like this:&lt;/p&gt; &lt;pre&gt;T load_reference_barrier(T* addr) { T obj = *addr; // Fast-path: accesses thread-local flag if (!is_gc_active()) return obj; // Mid-path 1: accesses small bitmap (byte per region, handful of KBs?) if (!is_in_collection_set(obj)) return obj; // Mid-path 2: accesses fwdptrs in object (entire heap?) T fwd = resolve_forwardee(obj); if (obj != fwd) return fwd; // Slow-path: call to runtime, once per location with non-forwarded object return load_reference_barrier_slowpath(obj); } &lt;/pre&gt; &lt;p&gt;The result is that whenever we load an object while the GC is active, and if that object is a reference into the collection set, we dive into resolving the object and possibly into the slow parts of the runtime to do the actual evacuation. Chances are that the object would be evacuated by the GC itself, and the barrier would discover this at the Mid-path 2 check, and then return from there. In the worst case, the barrier would call the runtime and do the whole thing.&lt;/p&gt; &lt;p&gt;The performance-sensitive part of this story is that we would go to the Mid-path 2 check all of the time for relocated objects until the GC cycle is over and GC updates the interesting references. If we do the access in a hot loop, we always walk deep into the barrier while GC is running. And the Mid-path 2 check is expensive because it reaches far and wide.&lt;/p&gt; &lt;p&gt;The idea behind self-fixing barriers is that when we have resolved the object and discovered the forwarded copy, we can just as well update the location right there. Since we are updating the reference to the object copy &lt;em&gt;not&lt;/em&gt; in the collection set, on the next barrier invocation we would exit from Mid-path 1.&lt;/p&gt; &lt;p&gt;This is what the barrier looks like with those changes:&lt;/p&gt; &lt;pre&gt;T load_reference_barrier(T* addr) { T obj = *addr; // Fast-path: accesses thread-local flag if (!is_gc_active()) return obj; // Mid-path 1: accesses small bitmap (byte per region, handful of KBs?) if (!is_in_collection_set(obj)) return obj; // Mid-path 2: accesses fwdptrs in objects (entire heap?) T fwd = resolve_forwardee(obj); if (obj != fwd) { // Can do the update here CAS(addr, fwd, obj); return fwd; } // Slow-path: call to runtime, once per location with non-forwarded object fwd = load_reference_barrier_slowpath(obj); // Can do the update here CAS(addr, fwd, obj); return fwd; } &lt;/pre&gt; &lt;p&gt;In other words, as soon as we get the &lt;code&gt;forwardee&lt;/code&gt;, we dive into the slow path, where we can stamp the reference to the new copy back into the original address. We do this using a compare-and-set operation in order to avoid a potentially racing update of the same field by another Java thread that we must not override.&lt;/p&gt; &lt;p&gt;Now, notice that we only fail the Mid-path 2 check once per non-updated location. When we fail this check, we can fix it and then never visit the darker parts of the barrier again. With that in mind, we can simplify the barrier by moving the entire update into the slow path itself:&lt;/p&gt; &lt;pre&gt;T load_reference_barrier(T* addr) { T obj = *addr; // Fast-path: accesses thread-local flag if (!is_gc_active()) return obj; // Mid-path 1: accesses small bitmap (byte per region, handful of KBs?) if (!is_in_collection_set(obj)) return obj; // Slow-path: call to runtime, once per non-updated location return load_reference_barrier_slowpath(obj, addr); // Update is actually here } &lt;/pre&gt; &lt;p&gt;Now we have simpler mutator-side barriers. The complication is in passing &lt;code&gt;addr&lt;/code&gt; to the slow path, which requires fiddling with the interpreter, C1, and C2â€”this is why it is not done this way from the beginning. Also, notice the caveat. For non-updated locations, we used to exit earlier from the Mid-path 2 check. Now, we enter the runtime for them. While this behavior looks worse in the code, doing many Mid-path 2 checks for hot objects that are in the collection set is much more expensive than entering the runtime for fix-up once per location.&lt;/p&gt; &lt;p&gt;These mechanics also leave less work to do for the GC workers during the update-references phase later.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Hopefully, you now have a better sense of how the self-fixing barriers in JDK 14&amp;#8217;s Shenandoah GC release can helpÂ to reduce local latencies in barrier mid- and slow paths.Â &lt;a href="https://developers.redhat.com/blog/2020/03/09/shenandoah-gc-in-jdk-14-part-2-concurrent-roots-and-class-unloading/" target="_blank" rel="noopener noreferrer"&gt;In the next article&lt;/a&gt;, I will cover concurrent root processing and concurrent class unloading. Together, these features reduce GC pause times, and thus global latencies, by moving GC work from the pause to the concurrent phase.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F04%2Fshenandoah-gc-in-jdk-14-part-1-self-fixing-barriers%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%201%3A%20Self-fixing%20barriers" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F04%2Fshenandoah-gc-in-jdk-14-part-1-self-fixing-barriers%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%201%3A%20Self-fixing%20barriers" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F04%2Fshenandoah-gc-in-jdk-14-part-1-self-fixing-barriers%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%201%3A%20Self-fixing%20barriers" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F04%2Fshenandoah-gc-in-jdk-14-part-1-self-fixing-barriers%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%201%3A%20Self-fixing%20barriers" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F04%2Fshenandoah-gc-in-jdk-14-part-1-self-fixing-barriers%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%201%3A%20Self-fixing%20barriers" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F04%2Fshenandoah-gc-in-jdk-14-part-1-self-fixing-barriers%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%201%3A%20Self-fixing%20barriers" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F04%2Fshenandoah-gc-in-jdk-14-part-1-self-fixing-barriers%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%201%3A%20Self-fixing%20barriers" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F04%2Fshenandoah-gc-in-jdk-14-part-1-self-fixing-barriers%2F&amp;#038;title=Shenandoah%20GC%20in%20JDK%2014%2C%20Part%201%3A%20Self-fixing%20barriers" data-a2a-url="https://developers.redhat.com/blog/2020/03/04/shenandoah-gc-in-jdk-14-part-1-self-fixing-barriers/" data-a2a-title="Shenandoah GC in JDK 14, Part 1: Self-fixing barriers"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/04/shenandoah-gc-in-jdk-14-part-1-self-fixing-barriers/"&gt;Shenandoah GC in JDK 14, Part 1: Self-fixing barriers&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/f88rGx1GSMs" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The development of the Shenandoah Garbage Collector (GC) in the upcoming JDK 14 has seen significant improvements. The first one covered here (self-fixing barriers) aims to reduce local latencies that are spent in barrier mid- and slow paths. The second will cover concurrent root processing and concurrent class unloading. Self-fixing barriers The self-fixing barriers improvement [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/04/shenandoah-gc-in-jdk-14-part-1-self-fixing-barriers/"&gt;Shenandoah GC in JDK 14, Part 1: Self-fixing barriers&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">684157</post-id><dc:creator>Roman Kennke</dc:creator><dc:date>2020-03-04T08:00:13Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/03/04/shenandoah-gc-in-jdk-14-part-1-self-fixing-barriers/</feedburner:origLink></entry><entry><title>Infinispan 11.0.0.Alpha2 and 10.1.3.Final</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/eK80cPIjS1Q/" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><author><name>Tristan Tarrant</name></author><id>searchisko:content:id:jbossorg_blog-infinispan_11_0_0_alpha2_and_10_1_3_final</id><updated>2020-03-03T12:00:00Z</updated><published>2020-03-03T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Dear Infinispan community,&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;weâ€™ve just tagged a couple of releases.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;First off is the second Alpha release of what will eventually become Infinispan 11. The &lt;a href="https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12344572"&gt;release notes&lt;/a&gt; may not be exciting, but it is mostly preparatory work for the big features we are working on: vastly improved async cross-site replication, monitoring, query improvements, the console and the CLI, and more.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We also released a micro-update to 10.1 which fixes quite a few bugs, especially in the way we handle JMX and MP metrics and further improves the documentation.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;h1 id="_new_release_naming_scheme" class="sect0"&gt;&lt;a class="anchor" href="#_new_release_naming_scheme"&gt;&lt;/a&gt;New release naming scheme&lt;/h1&gt; &lt;div class="openblock partintro"&gt; &lt;div class="content"&gt; Starting with the next development release of Infinispan 11, we will be adopting a new naming scheme. We will no longer be using the &lt;em&gt;Alpha&lt;/em&gt; and &lt;em&gt;Beta&lt;/em&gt; monikers, but we will use a progressive &lt;em&gt;Dev&lt;/em&gt; suffix to indicate that itâ€™s a development release. The next release will therefore be called 11.0.0.Dev03. &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_get_it_use_it_ask_us"&gt;&lt;a class="anchor" href="#_get_it_use_it_ask_us"&gt;&lt;/a&gt;Get it, Use it, Ask us!&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Please &lt;a href="https://infinispan.org/download/"&gt;download&lt;/a&gt;, &lt;a href="https://issues.jboss.org/projects/ISPN"&gt;report bugs&lt;/a&gt;, &lt;a href="https://infinispan.zulipchat.com/"&gt;chat with us&lt;/a&gt;, ask questions on &lt;a href="https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest"&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/eK80cPIjS1Q" height="1" width="1" alt=""/&gt;</content><summary>Dear Infinispan community, weâ€™ve just tagged a couple of releases. First off is the second Alpha release of what will eventually become Infinispan 11. The release notes may not be exciting, but it is mostly preparatory work for the big features we are working on: vastly improved async cross-site replication, monitoring, query improvements, the console and the CLI, and more. We also released a micr...</summary><dc:creator>Tristan Tarrant</dc:creator><dc:date>2020-03-03T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/03/03/2020-03-03-infinispan-11.0.0.Alpha2/</feedburner:origLink></entry><entry><title>C# 8 default interface methods</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/dN-cN9e3-OY/" /><category term=".NET Core" /><category term="C#" /><category term="Modern App Dev" /><category term="C# 8" /><category term="diamond problem" /><category term="interface methods" /><category term="static" /><author><name>Tom Deseyn</name></author><id>https://developers.redhat.com/blog/?p=676517</id><updated>2020-03-03T08:00:13Z</updated><published>2020-03-03T08:00:13Z</published><content type="html">&lt;p&gt;In the previous articles, we discussed C# 8 &lt;a href="https://developers.redhat.com/blog/2020/02/24/c-8-asynchronous-streams/" target="_blank" rel="noopener noreferrer"&gt;async streams&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/2020/02/27/c-8-pattern-matching/" target="_blank" rel="noopener noreferrer"&gt;pattern matching&lt;/a&gt;. In this article, weâ€™ll look at C# 8 default interface methods.&lt;/p&gt; &lt;h2&gt;Extending interfaces&lt;/h2&gt; &lt;p&gt;Before C# 8, it was not possible to add members to an interface without breaking the classes that implement the interface. Because interface members were abstract, classes needed to provide an implementation. C# 8 allows us to extend an interface and provide a default implementation. The runtime (which also needs to support this feature) uses the default implementation when the class does not provide it:&lt;/p&gt; &lt;pre&gt;interface IOutput { void PrintMessage(string message); void PrintException(Exception exception) =&amp;#62; PrintMessage($"Exception: {exception}"); } class ConsoleOutput : IOutput { public void PrintMessage(string message) =&amp;#62; Console.WriteLine(message); } &lt;/pre&gt; &lt;p&gt;In this example, &lt;code&gt;ConsoleOutput&lt;/code&gt; does not provide an implementation for &lt;code&gt;PrintException&lt;/code&gt;. When &lt;code&gt;PrintException&lt;/code&gt; is called against a &lt;code&gt;ConsoleOutput&lt;/code&gt; instance, the default method from the &lt;code&gt;IOutput&lt;/code&gt; interface will be called. &lt;code&gt;ConsoleOutput&lt;/code&gt; might provide its own implementation.&lt;/p&gt; &lt;p&gt;&lt;span id="more-676517"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;A derived interface can provide a more appropriate default implementation by explicitly implementing the base member:&lt;/p&gt; &lt;pre&gt;interface IA { void M() { WriteLine("IA.M"); } } interface IB : IA { void IA.M() { WriteLine("IB.M"); } } &lt;/pre&gt; &lt;p&gt;We explicitly implement the base member by including &lt;code&gt;IA.&lt;/code&gt; in the name. Without &lt;code&gt;IA.&lt;/code&gt;, the compiler would warn us to either make it explicit, or use the &lt;code&gt;new&lt;/code&gt; keyword if we want to hide it.&lt;/p&gt; &lt;p&gt;C# 8 allows us to add &lt;code&gt;static&lt;/code&gt; members in the interface that can be used by the default interface members:&lt;/p&gt; &lt;pre&gt;interface IOutput { private static string s_exceptionPrefix = "Exception"; public static string ExceptionPrefix { get =&amp;#62; s_exceptionPrefix; set =&amp;#62; s_exceptionPrefix = value; } void PrintMessage(string message); sealed void PrintException(Exception exception) =&amp;#62; PrintMessage($"{s_exceptionPrefix}: {exception}"); } &lt;/pre&gt; &lt;p&gt;This example shows a &lt;code&gt;private static&lt;/code&gt; field and a &lt;code&gt;public static&lt;/code&gt; method to implement the &lt;code&gt;ExceptionPrefix&lt;/code&gt; property that&amp;#8217;s used by the &lt;code&gt;sealed PrintException&lt;/code&gt; method. By adding the &lt;code&gt;sealed&lt;/code&gt; keyword, this method can no longer be overridden.&lt;/p&gt; &lt;h2&gt;Code inheritance&lt;/h2&gt; &lt;p&gt;C# supports inheriting from a single-base class and implementing multiple interfaces. Until C# 8, only the base class could provide code that is usable by the derived class. With C# 8, interfaces can provide code to their implementing classes.&lt;/p&gt; &lt;p&gt;In addition to that enhancement, we can use access modifiers on members and provide static members:&lt;/p&gt; &lt;pre&gt;interface IOutput { sealed void PrintException(Exception exception) =&amp;#62; PrintMessageCore($"Exception: {exception}"); protected void PrintMessageCore(string message); protected static void PrintToConsole(string message) =&amp;#62; Console.WriteLine(message); } class ConsoleOutput : IOutput { void IOutput.PrintMessageCore(string message) { IOutput.PrintToConsole(message); } } &lt;/pre&gt; &lt;p&gt;In this example, we see that the &lt;code&gt;IOutput&lt;/code&gt; interface delegates the &lt;code&gt;PrintMessageCore&lt;/code&gt; implementation to the derived class and provides a sealed implementation of &lt;code&gt;PrintException&lt;/code&gt; that makes use of &lt;code&gt;PrintMessageCore&lt;/code&gt;. The example also shows how the &lt;code&gt;static protected PrintToConsole&lt;/code&gt; method can be called from a derived type.&lt;/p&gt; &lt;p&gt;This setup allows us to include the code that is common with the interface, allowing different classes to share this code without a common base class and thus enabling &lt;a href="https://en.wikipedia.org/wiki/Multiple_inheritance" target="_blank" rel="noopener noreferrer"&gt;multiple inheritance&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Trait_(computer_programming)" target="_blank" rel="noopener noreferrer"&gt;trait&lt;/a&gt; patterns.&lt;/p&gt; &lt;p&gt;C# 8 allows sharing code, but interfaces are still not allowed to have instance fields (state). Interface methods that require state either need to be abstract (so they are implemented in the class), or they need to accept the state as an argument (provided by the caller, like the implementing class). This approach avoids the &lt;a href="https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem" target="_blank" rel="noopener noreferrer"&gt;inheritance diamond problem&lt;/a&gt; for state. For code, the diamond problem is solved by the compiler requiring additional members in ambiguous cases (which can then call the appropriate base).&lt;/p&gt; &lt;h1&gt;Conclusion&lt;/h1&gt; &lt;p&gt;In this article, we looked at C# 8 default interface methods. Default interface methods provide a way to extend interfaces with new members without breaking previous implementers. The new features also allow code to be shared between types, which enables &lt;a href="https://en.wikipedia.org/wiki/Multiple_inheritance" target="_blank" rel="noopener noreferrer"&gt;multiple inheritance&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Trait_(computer_programming)" target="_blank" rel="noopener noreferrer"&gt;trait&lt;/a&gt; patterns. In the next article, we will look at &lt;a href="https://developers.redhat.com/blog/2020/03/05/c-8-nullable-reference-types/" target="_blank" rel="noopener noreferrer"&gt;nullable reference types&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;C# 8 can be used with the .NET Core 3.1 SDK, which is available on &lt;a href="https://access.redhat.com/documentation/en-us/net_core/" target="_blank" rel="noopener noreferrer"&gt;Red Hat Enterprise Linux&lt;/a&gt;, &lt;a href="http://fedoraloves.net/" target="_blank" rel="noopener noreferrer"&gt;Fedora&lt;/a&gt;, &lt;a href="https://dotnet.microsoft.com/download" target="_blank" rel="noopener noreferrer"&gt;Windows, macOS, and other Linux distributions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F03%2Fc-8-default-interface-methods%2F&amp;#38;linkname=C%23%208%20default%20interface%20methods" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F03%2Fc-8-default-interface-methods%2F&amp;#38;linkname=C%23%208%20default%20interface%20methods" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F03%2Fc-8-default-interface-methods%2F&amp;#38;linkname=C%23%208%20default%20interface%20methods" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F03%2Fc-8-default-interface-methods%2F&amp;#38;linkname=C%23%208%20default%20interface%20methods" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F03%2Fc-8-default-interface-methods%2F&amp;#38;linkname=C%23%208%20default%20interface%20methods" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F03%2Fc-8-default-interface-methods%2F&amp;#38;linkname=C%23%208%20default%20interface%20methods" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F03%2Fc-8-default-interface-methods%2F&amp;#38;linkname=C%23%208%20default%20interface%20methods" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F03%2Fc-8-default-interface-methods%2F&amp;#038;title=C%23%208%20default%20interface%20methods" data-a2a-url="https://developers.redhat.com/blog/2020/03/03/c-8-default-interface-methods/" data-a2a-title="C# 8 default interface methods"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/03/c-8-default-interface-methods/"&gt;C# 8 default interface methods&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/dN-cN9e3-OY" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In the previous articles, we discussed C# 8 async streams and pattern matching. In this article, weâ€™ll look at C# 8 default interface methods. Extending interfaces Before C# 8, it was not possible to add members to an interface without breaking the classes that implement the interface. Because interface members were abstract, classes needed to [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/03/c-8-default-interface-methods/"&gt;C# 8 default interface methods&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">676517</post-id><dc:creator>Tom Deseyn</dc:creator><dc:date>2020-03-03T08:00:13Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/03/03/c-8-default-interface-methods/</feedburner:origLink></entry><entry><title>Voxxed Days Milan 2020 - 5 Questions Everyone Ignores with Microservices (accepted)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/vR2ILOkqgyw/voxxed-days-milan-2020-5-questions-everyone-ignores-microservices-accepted.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-voxxed_days_milan_2020_5_questions_everyone_ignores_with_microservices_accepted</id><updated>2020-03-02T12:10:25Z</updated><published>2020-03-02T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://voxxeddays.com/milan/" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img alt="voxxed days milan" border="0" data-original-height="606" data-original-width="1576" height="123" src="https://1.bp.blogspot.com/-MoUUJCrGpeE/XdubNVK78EI/AAAAAAAAwvA/my1eyzVW_sABLEpISOicuNQNhHkn5jtHgCNcBGAsYHQ/s320/Screenshot%2B2019-11-25%2Bat%2B10.06.53.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;Previously &lt;a href="https://www.schabell.org/2019/11/voxxed-days-milan-2020-open-career-microservice-questions-devops-heroes.html" target="_blank"&gt;posted that I've pushed a few talks&lt;/a&gt; to the Voxxed Days Milan 2020 and this last week I got the first accept back. &lt;br /&gt;&lt;br /&gt;&lt;a href="https://voxxeddays.com/milan/" target="_blank"&gt;Voxxed Days Milan 2020&lt;/a&gt; shall be hosted on a single day, May 16th 2020 in Milan, Italy. All talks are going to be recorded and published online. You can enjoy previousâ€™ year edition of Voxxed Days Milan 2019 recordings &lt;a href="https://www.youtube.com/playlist?list=PLRsbF2sD7JVpfbaiBoeCOCMCWxSTuuZ5c"&gt;here&lt;/a&gt;. Even those not at Voxxed Days Milan can watch them, but the real fun was being there.&lt;br /&gt;&lt;br /&gt;I'm really looking forward to visiting this wonderful city full of history and vibrant life, but there is one thing that might be throwing a bit of a wrench in the works. &lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;It's probably not gone unnoticed, but there is an outbreak of a virus currently hitting the northern regions of Italy. The &lt;a href="https://www.internationalsos.com/" target="_blank"&gt;InternationalSOS&lt;/a&gt; organization put out an &lt;i&gt;Advisory: Italy - Cluster of COVID-19 in Lombardy.&lt;/i&gt; Milan is right in this zone so currently it's not advisabled to travel to Milan.&lt;br /&gt;&lt;br /&gt;Luckily, this conference is not happening until May 15th, so until then we continue to monitor the status of this situation. My fingers are crossed and hoping for the best.&lt;br /&gt;&lt;br /&gt;The talk that got accepted is an in depth look at the challenges that rise to the top of organizations implementing microservices.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; margin: 0px; position: relative;"&gt;5 Questions Everyone Ignores with Microservices&lt;/h3&gt;&lt;i style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;The daily hype is all around you. Microservices are a necessary step along the path to integration for a digitally successful future for your organization. Funny enough, when discussing the development impact while transitioning to microservices, there are five questions that keep popping up. This session covers the questions that everyone should ask about microservices. Join us for an hour of power, where real life developer experiences are used to highlight the lessons we're all learning as we transition our integration infrastructure into modern day microservices.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Hoping that the people of Milan remain safe and that we can get through to a successful Voxxed Days 2020.&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=o5w21R7sCuc:4LWC2FfhsWk:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=o5w21R7sCuc:4LWC2FfhsWk:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=o5w21R7sCuc:4LWC2FfhsWk:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=o5w21R7sCuc:4LWC2FfhsWk:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=o5w21R7sCuc:4LWC2FfhsWk:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=o5w21R7sCuc:4LWC2FfhsWk:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=o5w21R7sCuc:4LWC2FfhsWk:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=o5w21R7sCuc:4LWC2FfhsWk:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=o5w21R7sCuc:4LWC2FfhsWk:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=o5w21R7sCuc:4LWC2FfhsWk:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=o5w21R7sCuc:4LWC2FfhsWk:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/o5w21R7sCuc" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/vR2ILOkqgyw" height="1" width="1" alt=""/&gt;</content><summary>Previously posted that I've pushed a few talks to the Voxxed Days Milan 2020 and this last week I got the first accept back. Voxxed Days Milan 2020 shall be hosted on a single day, May 16th 2020 in Milan, Italy. All talks are going to be recorded and published online. You can enjoy previousâ€™ year edition of Voxxed Days Milan 2019 recordings here. Even those not at Voxxed Days Milan can watch them,...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-03-02T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/o5w21R7sCuc/voxxed-days-milan-2020-5-questions-everyone-ignores-microservices-accepted.html</feedburner:origLink></entry><entry><title>Debugging components in OpenShift using VS Code</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/S3areOjMAtQ/" /><link rel="enclosure" type="video/mp4" href="https://developers.redhat.com/blog/wp-content/uploads/2020/02/debug-node2.mp4" length="616598" /><link rel="enclosure" type="video/mp4" href="https://developers.redhat.com/blog/wp-content/uploads/2020/02/debug-java2.mp4" length="1208331" /><category term="Developer Tools" /><category term="Java" /><category term="VS Code" /><category term="component" /><category term="debug" /><category term="odo" /><category term="openshift" /><author><name>Mohit Suman</name></author><id>https://developers.redhat.com/blog/?p=685777</id><updated>2020-02-28T08:00:04Z</updated><published>2020-02-28T08:00:04Z</published><content type="html">&lt;p&gt;The latest release of &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-openshift-connector" target="_blank" rel="noopener noreferrer"&gt;OpenShift Connector&lt;/a&gt; enhances the developer experience on &lt;a href="http://developers.redhat.com/openshift/" target="_blank" rel="noopener noreferrer"&gt;Red Hat OpenShift&lt;/a&gt; with support for local code debugging. This enhancement lets the user write and debug local code without leaving the editor.&lt;/p&gt; &lt;p&gt;Based on developer community feedback related to OpenShift Connector for Visual Studio Code (VS Code), one of the main focuses was to simplify the OpenShift workflow for developers by letting them debug code that is deployed on OpenShift directly from VS Code. Visual Studio Code&amp;#8217;s debugging architecture allows extension authors to easily integrate existing debuggers into VS Code while offering a common user interface for all of them.&lt;/p&gt; &lt;p&gt;Following this principle, we added a new debug feature to our OpenShift extension for VS Code. This feature allows debugging local NodeJS and Java components deployed on an OpenShift instance directly from the IDE.&lt;/p&gt; &lt;p&gt;This feature is available to the community from version 0.1.3 onwards and the extension can be installed from the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-openshift-connector" target="_blank" rel="noopener noreferrer"&gt;VS Code Marketplace&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;How does it work?&lt;/h2&gt; &lt;p&gt;This release provides the new &lt;code&gt;OpenShift: Debug&lt;/code&gt; command, which provides a simpler way to start debugging OpenShift components pushed to a cluster.&lt;/p&gt; &lt;p&gt;&lt;code&gt;OpenShift: Debug&lt;/code&gt; is an experimental feature that uses the experimental OpenShift Do (&lt;code&gt;odo&lt;/code&gt;) &lt;code&gt;debug&lt;/code&gt; command under the hood. This enhancement allows developers to set breakpoints directly in the source code, watch variables, and follow the full call stack when debuggingâ€”all without leaving the editor.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The debug feature is supported only for components created using &lt;code&gt;local workspace&lt;/code&gt; and deployed on OpenShift. Components created using &lt;code&gt;Git Repository&lt;/code&gt; and &lt;code&gt;Binary File&lt;/code&gt; are &lt;em&gt;not&lt;/em&gt; supported.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;debug&lt;/code&gt; command can be invoked in following ways:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Using the &lt;strong&gt;Command Palette&lt;/strong&gt; [OpenShift: Debug] (Figure 1)&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_687217" style="width: 447px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-687217" class="wp-image-687217" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-2020-02-20-at-4.30.01-AM.png" alt="openshift-connector-debug-command-palette" width="437" height="73" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-2020-02-20-at-4.30.01-AM.png 1580w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-2020-02-20-at-4.30.01-AM-300x50.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-2020-02-20-at-4.30.01-AM-768x128.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-2020-02-20-at-4.30.01-AM-1024x171.png 1024w" sizes="(max-width: 437px) 100vw, 437px" /&gt;&lt;p id="caption-attachment-687217" class="wp-caption-text"&gt;Figure 1: Accessing the &lt;code&gt;OpenShift: Debug&lt;/code&gt; command through the command palette.&lt;/p&gt;&lt;/div&gt; &lt;p style="padding-left: 40px;"&gt;2. Using &lt;strong&gt;OpenShift Application Explorer&lt;/strong&gt; view. User needs to go to the context menu for component nodes and select &lt;code&gt;Debug&lt;/code&gt; action as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_687237" style="width: 340px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-687237" class="wp-image-687237" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-2020-02-20-at-4.35.40-AM.png" alt="openshift-connector-debug-context-menu" width="330" height="392" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-2020-02-20-at-4.35.40-AM.png 852w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-2020-02-20-at-4.35.40-AM-253x300.png 253w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/Screenshot-2020-02-20-at-4.35.40-AM-768x912.png 768w" sizes="(max-width: 330px) 100vw, 330px" /&gt;&lt;p id="caption-attachment-687237" class="wp-caption-text"&gt;Figure 2: Accessing the &lt;code&gt;OpenShift: Debug&lt;/code&gt; command through the &lt;strong&gt;OpenShift Application Explorer&lt;/strong&gt; view.&lt;/p&gt;&lt;/div&gt; &lt;h3 id="_debug-serverside-javascript-in-nodejs" data-needslink="_debug-serverside-javascript-in-nodejs"&gt;Debug a NodeJS component in OpenShift&lt;/h3&gt; &lt;p&gt;The default Visual Studio Code installation includes JavaScript/TypeScript language support and the debugger extensions required to debug a NodeJS component. That means that the new &lt;code&gt;OpenShift: Debug&lt;/code&gt; command can be used without installing any additional extensions. To get started:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Install OpenShift Connector from the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-openshift-connector" target="_blank" rel="noopener noreferrer"&gt;marketplace&lt;/a&gt; or from the &lt;strong&gt;Extensions&lt;/strong&gt; icon in VS Code.&lt;/li&gt; &lt;li&gt;Log into the running OpenShift cluster.&lt;/li&gt; &lt;li&gt;Create a NodeJS component from the local workspace and deploy it in OpenShift.&lt;/li&gt; &lt;li&gt;Perform the debugging actions as shown in the video below, which shows a detailed walk-through of the workflow for debugging a local NodeJS component on OpenShift:&lt;/li&gt; &lt;/ol&gt; &lt;div style="width: 640px;" class="wp-video"&gt;&lt;!--[if lt IE 9]&gt;&lt;script&gt;document.createElement('video');&lt;/script&gt;&lt;![endif]--&gt; &lt;video class="wp-video-shortcode" id="video-685777-1" width="640" height="360" preload="metadata" controls="controls"&gt;&lt;source type="video/mp4" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/debug-node2.mp4?_=1" /&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/02/debug-node2.mp4"&gt;https://developers.redhat.com/blog/wp-content/uploads/2020/02/debug-node2.mp4&lt;/a&gt;&lt;/video&gt;&lt;/div&gt; &lt;h3 id="_debug-serverside-javascript-in-nodejs" data-needslink="_debug-serverside-javascript-in-nodejs"&gt;Debug a Java component in OpenShift&lt;/h3&gt; &lt;p&gt;To debug a Java component, the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.java" target="_blank" rel="noopener noreferrer"&gt;Java Language Support&lt;/a&gt; and &lt;a href="https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug" target="_blank" rel="noopener noreferrer"&gt;Java Debugger&lt;/a&gt; extensions are required. Therefore, the OpenShift Connector extension will prompt you to install the missing extension(s) before launching the debugger for a Java component. To get started:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Install OpenShift Connector from the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-openshift-connector" target="_blank" rel="noopener noreferrer"&gt;marketplace&lt;/a&gt; or from the &lt;strong&gt;Extensions&lt;/strong&gt; icon in VS Code.&lt;/li&gt; &lt;li&gt;Log into the running OpenShift cluster.&lt;/li&gt; &lt;li&gt;Create a Java component from the local workspace and deploy it in OpenShift.&lt;/li&gt; &lt;li&gt;Perform the debugging actions as shown in the video below, which shows a detailed walk-through of the workflow for debugging a local Java component on OpenShift:&lt;/li&gt; &lt;/ol&gt; &lt;div style="width: 640px;" class="wp-video"&gt;&lt;video class="wp-video-shortcode" id="video-685777-2" width="640" height="360" preload="metadata" controls="controls"&gt;&lt;source type="video/mp4" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/debug-java2.mp4?_=2" /&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/02/debug-java2.mp4"&gt;https://developers.redhat.com/blog/wp-content/uploads/2020/02/debug-java2.mp4&lt;/a&gt;&lt;/video&gt;&lt;/div&gt; &lt;h3 id="_feedback" data-needslink="_feedback"&gt;Feedback&lt;/h3&gt; &lt;p&gt;Weâ€™ve released this extension onÂ &lt;a class="external-link" href="https://github.com/redhat-developer/vscode-openshift-tools" target="_blank" rel="noopener noreferrer"&gt;GitHub&lt;/a&gt; as an MIT-licensed open source project, and the extension is available in the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-openshift-connector" target="_blank" rel="noopener noreferrer"&gt;VS Code Marketplace&lt;/a&gt;.Â We really want your feedback and help to build an even better debugging experience. If you have any issues or ideas for improvements, feel free to reach out to us onÂ &lt;a class="external-link" href="https://gitter.im/redhat-developer/openshift-connector" target="_blank" rel="noopener noreferrer"&gt;Gitter&lt;/a&gt;Â orÂ &lt;a class="external-link" href="https://github.com/redhat-developer/vscode-openshift-tools" target="_blank" rel="noopener noreferrer"&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &lt;p style="text-align: left;"&gt;Look out for more awesome features in the next releases!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F28%2Fdebugging-components-in-openshift-using-vs-code%2F&amp;#38;linkname=Debugging%20components%20in%20OpenShift%20using%20VS%20Code" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F28%2Fdebugging-components-in-openshift-using-vs-code%2F&amp;#38;linkname=Debugging%20components%20in%20OpenShift%20using%20VS%20Code" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F28%2Fdebugging-components-in-openshift-using-vs-code%2F&amp;#38;linkname=Debugging%20components%20in%20OpenShift%20using%20VS%20Code" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F28%2Fdebugging-components-in-openshift-using-vs-code%2F&amp;#38;linkname=Debugging%20components%20in%20OpenShift%20using%20VS%20Code" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F28%2Fdebugging-components-in-openshift-using-vs-code%2F&amp;#38;linkname=Debugging%20components%20in%20OpenShift%20using%20VS%20Code" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F28%2Fdebugging-components-in-openshift-using-vs-code%2F&amp;#38;linkname=Debugging%20components%20in%20OpenShift%20using%20VS%20Code" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F28%2Fdebugging-components-in-openshift-using-vs-code%2F&amp;#38;linkname=Debugging%20components%20in%20OpenShift%20using%20VS%20Code" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F28%2Fdebugging-components-in-openshift-using-vs-code%2F&amp;#038;title=Debugging%20components%20in%20OpenShift%20using%20VS%20Code" data-a2a-url="https://developers.redhat.com/blog/2020/02/28/debugging-components-in-openshift-using-vs-code/" data-a2a-title="Debugging components in OpenShift using VS Code"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/28/debugging-components-in-openshift-using-vs-code/"&gt;Debugging components in OpenShift using VS Code&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/S3areOjMAtQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The latest release of OpenShift Connector enhances the developer experience on Red Hat OpenShift with support for local code debugging. This enhancement lets the user write and debug local code without leaving the editor. Based on developer community feedback related to OpenShift Connector for Visual Studio Code (VS Code), one of the main focuses was [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/28/debugging-components-in-openshift-using-vs-code/"&gt;Debugging components in OpenShift using VS Code&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">685777</post-id><dc:creator>Mohit Suman</dc:creator><dc:date>2020-02-28T08:00:04Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/02/28/debugging-components-in-openshift-using-vs-code/</feedburner:origLink></entry></feed>
